import java.time.Duration

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$dockerComposePluginVersion"
    }
}

subprojects {
    apply plugin: "java-library"

    sourceCompatibility = 17
    targetCompatibility = 17

    repositories {
        mavenCentral()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
    
    dependencies {
        implementation(platform("io.eventuate.platform:eventuate-platform-dependencies:$eventuatePlatformVersion"))
        implementation(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))
    }
}


apply plugin: 'docker-compose'

dockerCompose {
    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_MESSAGING_KAFKA_IMAGE_VERSION", eventuateMessagingKafkaImageVersion
    environment.put "EVENTUATE_CDC_VERSION", eventuateCdcImageVersion

    removeOrphans = true
    dockerComposeStopTimeout = Duration.ofSeconds(1)

    mysqlbinlogkafka {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-binlog.yml"]
    }

    mysqlbinlogactivemq {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-binlog.yml"]
        environment.put "SPRING_PROFILES_ACTIVE", "ActiveMQ"
    }

    mysqlbinlograbbitmq {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-binlog.yml"]
        environment.put "SPRING_PROFILES_ACTIVE", "RabbitMQ"
    }

    postgrespollingkafka {
        projectName = null
        useComposeFiles = ["docker-compose-postgres-polling.yml"]
        environment.put "SPRING_PROFILES_ACTIVE", "EventuatePolling,Postgres"
    }

    postgrespollingactivemq {
        projectName = null
        useComposeFiles = ["docker-compose-postgres-polling.yml"]
        environment.put "SPRING_PROFILES_ACTIVE", "EventuatePolling,Postgres,ActiveMQ"
    }

    postgrespollingrabbitmq {
        projectName = null
        useComposeFiles = ["docker-compose-postgres-polling.yml"]
        environment.put "SPRING_PROFILES_ACTIVE", "EventuatePolling,RabbitMQ,Postgres"
    }

    postgreswalkafka {
        projectName = null
        useComposeFiles = ["docker-compose-postgres-wal.yml"]
        environment.put "SPRING_PROFILES_ACTIVE", "PostgresWal,Postgres"
    }

    postgreswalactivemq {
        projectName = null
        useComposeFiles = ["docker-compose-postgres-wal.yml"]
        environment.put "SPRING_PROFILES_ACTIVE", "PostgresWal,ActiveMQ,Postgres"
    }

    postgreswalrabbitmq {
        projectName = null
        useComposeFiles = ["docker-compose-postgres-wal.yml"]
        environment.put "SPRING_PROFILES_ACTIVE", "PostgresWal,RabbitMQ,Postgres"
    }

}

def effectiveMode(mode, database) {
    if (mode != "")
        return mode
    if (database == "mysql")
        return "binlog"
    else
        return "wal"
}

task startServices {
    dependsOn "${database}${effectiveMode(mode, database)}${messageBroker}ComposeUp"
}

task stopServices {
    dependsOn "${database}${effectiveMode(mode, database)}${messageBroker}ComposeDown"
}
